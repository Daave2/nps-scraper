name: Looker Studio Scraper Suite

on:
  workflow_dispatch: {}
  schedule:
    # Runs at 08:05, 11:05, 14:05, 17:05, 20:05 London time (UTC+0 in cron)
    - cron: "5 7,10,13,16,19 * * *"

concurrency:
  group: looker-scrape
  cancel-in-progress: false

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # ────────────────────────────────
      # Checkout
      # ────────────────────────────────
      - name: Checkout
        uses: actions/checkout@v4

      # ────────────────────────────────
      # Setup Python + Playwright
      # ────────────────────────────────
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install playwright requests schedule pytz
          python -m playwright install --with-deps chromium

      # ────────────────────────────────
      # Export TODAY for date-based caching
      # ────────────────────────────────
      - name: Export TODAY
        run: echo "TODAY=$(date -u +%Y%m%d)" >> $GITHUB_ENV

      # ────────────────────────────────
      # Restore state from cache
      # ────────────────────────────────
      - name: Restore scraper state (auth + logs)
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
            daily_report_log.csv
          key: scraper-state-${{ runner.os }}-v1-${{ github.ref_name }}-${{ env.TODAY }}
          restore-keys: |
            scraper-state-${{ runner.os }}-v1-${{ github.ref_name }}-
            scraper-state-${{ runner.os }}-v1-

      # ────────────────────────────────
      # Optional fallback (first cold start)
      # ────────────────────────────────
      - name: Fallback restore auth_state.json from secret
        run: |
          if [ -n "${AUTH_STATE_B64}" ]; then
            echo "${AUTH_STATE_B64}" | base64 --decode > auth_state.json
            echo "Decoded auth_state.json from AUTH_STATE_B64."
          else
            echo "No AUTH_STATE_B64 secret provided — continuing without."
          fi
        env:
          AUTH_STATE_B64: ${{ secrets.AUTH_STATE_B64 }}

      # ────────────────────────────────
      # Create config.ini dynamically from secrets
      # ────────────────────────────────
      - name: Create/Update config.ini from secrets
        run: |
          {
            echo "[DEFAULT]"
            echo "GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}"
            echo "GOOGLE_PASSWORD=${{ secrets.GOOGLE_PASSWORD }}"
            echo "MAIN_WEBHOOK=${{ secrets.MAIN_WEBHOOK }}"
            echo "ALERT_WEBHOOK=${{ secrets.ALERT_WEBHOOK }}"
            echo "COMPLAINTS_WEBHOOK=${{ secrets.COMPLAINTS_WEBHOOK }}"
            echo "DAILY_WEBHOOK=${{ secrets.DAILY_WEBHOOK }}"
          } > config.ini

      # ────────────────────────────────
      # Run all scrapers (NPS → Complaints → Daily)
      # ────────────────────────────────
      - name: Run NPS scraper
        run: xvfb-run -a python scrape.py now || true

      - name: Run Complaints scraper
        run: xvfb-run -a python scrape_complaints.py now || true

      - name: Run Daily Report scraper
        run: xvfb-run -a python scrape_daily.py now || true

      # ────────────────────────────────
      # Show file states for debugging
      # ────────────────────────────────
      - name: Show state files
        run: |
          echo "::group::State files"
          for f in auth_state.json comments_log.csv complaints_log.csv daily_report_log.csv scrape.log scrape_complaints.log scrape_daily.log; do
            if [ -f "$f" ]; then
              echo "[OK] $f -> $(wc -c < "$f") bytes"
            else
              echo "[MISS] $f"
            fi
          done
          echo "::endgroup::"

          echo "::group::daily_report_log.csv (last 5)"
          if [ -f daily_report_log.csv ]; then tail -n 5 daily_report_log.csv || true; else echo "daily_report_log.csv not found"; fi
          echo "::endgroup::"

          echo "::group::screens/ listing"
          ls -lah screens || echo "no screens/"
          echo "::endgroup::"

      # ────────────────────────────────
      # Upload artifacts for inspection
      # ────────────────────────────────
      - name: Upload logs and state as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-state-${{ github.run_id }}
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
            daily_report_log.csv
            scrape.log
            scrape_complaints.log
            scrape_daily.log
            screens/
          if-no-files-found: ignore

      # ────────────────────────────────
      # Save updated cache snapshot
      # ────────────────────────────────
      - name: Save updated scraper state to cache
        uses: actions/cache/save@v4
        with:
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
            daily_report_log.csv
          key: scraper-state-${{ runner.os }}-v1-${{ github.run_id }}
