name: Looker Studio Scrapers

on:
  schedule:
    - cron: "15 8,11,14,17,20 * * *"   # every 3 hours +15 min
  workflow_dispatch:

jobs:
  scrape:
    name: Run NPS + Complaints Scrapers
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: scraper-state
      cancel-in-progress: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright schedule requests configparser
          playwright install chromium

      - name: Restore scraper state (auth + logs)
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
          # Include run_id in key to avoid collision, use prefix for restore
          key: scraper-state-${{ runner.os }}-v1-${{ github.run_id }}
          restore-keys: |
            scraper-state-${{ runner.os }}-v1-
            scraper-state-${{ runner.os }}-
            scraper-state-

      - name: Decode AUTH_STATE_B64 (if provided)
        run: |
          if [ -n "${{ secrets.AUTH_STATE_B64 }}" ]; then
            echo "${{ secrets.AUTH_STATE_B64 }}" | base64 --decode > auth_state.json
            echo "Decoded auth_state.json from secret."
          else
            echo "No AUTH_STATE_B64 secret provided â€” continuing without."
          fi

      - name: Run NPS scraper
        env:
          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
          MAIN_WEBHOOK: ${{ secrets.MAIN_WEBHOOK }}
          ALERT_WEBHOOK: ${{ secrets.ALERT_WEBHOOK }}
        run: |
          xvfb-run -a python scrape.py now || true

      - name: Run Complaints scraper
        env:
          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
          MAIN_WEBHOOK: ${{ secrets.MAIN_WEBHOOK }}
          ALERT_WEBHOOK: ${{ secrets.ALERT_WEBHOOK }}
          COMPLAINTS_WEBHOOK: ${{ secrets.COMPLAINTS_WEBHOOK }}
        run: |
          xvfb-run -a python scrape_complaints.py now || true

      - name: Display state summary
        run: |
          echo "::group::State files"
          for f in auth_state.json comments_log.csv complaints_log.csv scrape.log scrape_complaints.log; do
            if [ -f "$f" ]; then
              echo "[OK] $f -> $(wc -c < "$f") bytes"
            else
              echo "[MISS] $f"
            fi
          done
          echo "::endgroup::"
          echo "::group::Tail logs"
          tail -n 20 scrape.log scrape_complaints.log || true
          echo "::endgroup::"
          echo "::group::screens/ listing"
          ls -lah screens || echo "no screens/"
          echo "::endgroup::"

      - name: Upload artifacts (logs + state)
        uses: actions/upload-artifact@v4
        with:
          name: scraper-state-${{ github.run_id }}
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
            scrape.log
            scrape_complaints.log
            screens/
          if-no-files-found: ignore
          retention-days: 7

      - name: Save updated scraper state to cache
        if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            auth_state.json
            comments_log.csv
            complaints_log.csv
          key: scraper-state-${{ runner.os }}-v1-${{ github.run_id }}
